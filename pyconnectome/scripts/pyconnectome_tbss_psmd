#!/usr/bin/env python3
##########################################################################
# NSAp - Copyright (C) CEA, 2018
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
##########################################################################

# System import
import os
import argparse
import textwrap
import glob
import re
import json
import shutil
from datetime import datetime
from argparse import RawTextHelpFormatter
from datetime import datetime
from pprint import pprint

# Bredala import
try:
    import bredala
    bredala.USE_PROFILER = False
    bredala.register("pyconnectome.wrapper",
                     names=["FSLWrapper.__init__", "FSLWrapper.__call__"])
except:
    pass

# Pyconnectome imports
import pyconnectome
from pyconnectome.wrapper import FSLWrapper
from pyconnectome import DEFAULT_FSL_PATH
import nibabel
import numpy
import progressbar

# Script documentation
DOC = """
TBSS: a novel imaging marker for small vessel disease.
------------------------------------------------------

Implementation of the E. Baykara et al. Ann Neurol 2016 paper.

Before running this script, you must perform a TBSS analysis using for
instance the 'pyconnectome_tbss' script, and project the MD maps using the
'pyconnectome_tbss_non_fa' script.

Command example on SENIOR:

python $HOME/git/pyconnectome/pyconnectome/scripts/pyconnectome_tbss_psmd \
    -i /neurospin/nsap/research/tbss/senior/tbss/stats/all_MD_skeletonised.nii.gz \
    -m /neurospin/nsap/research/tbss/psmd/skeleton_mask.nii.gz \
    -o /neurospin/nsap/research/tbss/senior/psmd \
    -F /neurospin/nsap/local/fsl-5.0.11.sh \
    -V 2
"""


def is_file(filepath):
    """ Check file's existence - argparse 'type' argument.
    """
    if not os.path.isfile(filepath):
        raise argparse.ArgumentError("File does not exist: %s" % filepath)
    return filepath


def is_directory(dirarg):
    """ Type for argparse - checks that directory exists.
    """
    if not os.path.isdir(dirarg):
        raise argparse.ArgumentError(
            "The directory '{0}' does not exist!".format(dirarg))
    return dirarg


# Parse input arguments
def get_cmd_line_args():
    """
    Create a command line argument parser and return a dict mapping
    <argument name> -> <argument value>.
    """
    parser = argparse.ArgumentParser(
        prog="python pyconnectome_tbss",
        description=textwrap.dedent(DOC),
        formatter_class=RawTextHelpFormatter)

    # Required arguments
    required = parser.add_argument_group("required arguments")
    required.add_argument(
        "-i", "--all-md-skeletonised", type=is_file, required=True,
        help="The TBBS MD on the skeleton.")
    required.add_argument(
        "-m", "--mask", type=is_file, required=True,
        help="The skeleton mask to avoid CSF partial volume effect "
             "contamination.")
    required.add_argument(
        "-o", "--outdir",
        type=is_directory, required=True, metavar="<path>",
        help="Path to the output directory.")

    # Optional argument
    parser.add_argument(
        "-F", "--fsl-config", metavar="<path>", type=is_file,
        help="Path to fsl sh config file.")
    parser.add_argument(
        "-V", "--verbose",
        type=int, choices=[0, 1, 2], default=2,
        help="Increase the verbosity level: 0 silent, [1, 2] verbose.")

    # Create a dict of arguments to pass to the 'main' function
    args = parser.parse_args()
    kwargs = vars(args)
    verbose = kwargs.pop("verbose")
    if kwargs["fsl_config"] is None:
        kwargs["fsl_config"] = DEFAULT_FSL_PATH
    return kwargs, verbose


"""
Parse the command line.
"""

inputs, verbose = get_cmd_line_args()
runtime = {
    "timestamp": datetime.now().isoformat(),
    "tool": "pyconnectome_tbss_psmd",
    "tool_version": pyconnectome.__version__,
    "fsl_version": FSLWrapper([], shfile=inputs["fsl_config"]).version
}
outputs = {}
if verbose > 0:
    pprint("[info] Starting TBSS PSMD analysis...")
    pprint("[info] Runtime:")
    pprint(runtime)
    pprint("[info] Inputs:")
    pprint(inputs)


"""
Histogram analysis
"""
skel_mask_file = os.path.join(
    inputs["outdir"], "all_md_skeletonised_masked.nii.gz")
cmd1 = [
    "fslmaths", inputs["all_md_skeletonised"], "-mas", inputs["mask"],
    "-mul", "1000000", skel_mask_file]
if not os.path.isfile(skel_mask_file):
    process = FSLWrapper(cmd1, shfile=inputs["fsl_config"])
    process()
outputs["md_skel_mask"] = skel_mask_file
im = nibabel.load(skel_mask_file)
data = im.get_data()
nb_slices = data.shape[-1]
psmd = []
with progressbar.ProgressBar(max_value=nb_slices) as bar:
    for slice_nb in range(nb_slices):
        _data = data[..., slice_nb].flatten()
        _data = _data[numpy.where(_data != 0)]
        a = numpy.percentile(_data, 95)
        b = numpy.percentile(_data, 5)
        psmd.append((a - b) / 1000000.)
        bar.update(slice_nb + 1)
psmd_file = os.path.join(inputs["outdir"], "all_PSMD.json")
with open(psmd_file, "wt") as open_file:
    json.dump(psmd, open_file, indent=2)
outputs["psmd"] = psmd_file


"""
Update the outputs and save them and the inputs in a 'logs' directory.
"""
logdir = os.path.join(inputs["outdir"], "logs")
if not os.path.isdir(logdir):
    os.mkdir(logdir)
for name, final_struct in [("inputs", inputs), ("outputs", outputs),
                           ("runtime", runtime)]:
    log_file = os.path.join(logdir, "{0}.json".format(name))
    with open(log_file, "wt") as open_file:
        json.dump(final_struct, open_file, sort_keys=True, check_circular=True,
                  indent=4)
if verbose > 1:
    print("[final]")
    pprint(outputs)
